@model List<EduSphere.Models.ExamResultViewModel>
@{
    ViewData["Title"] = "Sınav Sonuçlarım";
}

<div class="announcement-modal">
    <div class="announcement-title">Sınav Sonuçlarım</div>

    @if (ViewBag.UserDepartment != null)
    {
        <div class="schedule-info">
            <p class="department-info">
                <strong>Departman:</strong> @ViewBag.UserDepartment
            </p>
            @if (ViewBag.UserName != null)
            {
                <p class="student-info">
                    <strong>Öğrenci:</strong> @ViewBag.UserName
                </p>
            }
        </div>
    }

    @if (Model != null && Model.Count > 0)
    {
        <div class="announcement-list">
            @{
                var groupedResults = Model.GroupBy(r => r.CourseName)
                .OrderBy(g => g.Key)
                .ToList();
            }

            @foreach (var courseGroup in groupedResults)
            {
                var vizeResult = courseGroup.FirstOrDefault(r => r.ExamType == "Vize");
                var finalResult = courseGroup.FirstOrDefault(r => r.ExamType == "Final");
                var butunlemeResult = courseGroup.FirstOrDefault(r => r.ExamType == "Bütünleme");

                // Ortalama hesaplama
                double? average = null;
                bool isPassed = false;
                string passStatus = "";

                if (vizeResult != null && finalResult != null)
                {
                    average = (vizeResult.Score * 0.4) + (finalResult.Score * 0.6);
                    isPassed = average >= 60;
                    passStatus = isPassed ? "Geçti" : "Kaldı";
                }
                else if (butunlemeResult != null && vizeResult != null)
                {
                    average = (vizeResult.Score * 0.4) + (butunlemeResult.Score * 0.6);
                    isPassed = average >= 60;
                    passStatus = isPassed ? "Geçti" : "Kaldı";
                }

                <div class="announcement-card">
                    <div class="announcement-header">
                        <div class="announcement-title-inner">
                            @courseGroup.Key
                        </div>
                        <div class="announcement-date">
                            @courseGroup.Count() Sonuç
                        </div>
                    </div>

                    <div class="exam-results-row">
                        <!-- Vize Column (Sol) -->
                        <div class="exam-column">
                            <div class="exam-column-header">
                                <span class="exam-type-badge vize">Vize</span>
                            </div>
                            <div class="exam-column-content">
                                @if (vizeResult != null)
                                {
                                    <div class="exam-score">
                                        <span class="score-number @(vizeResult.IsPassed ? "passed" : "failed")">
                                            @vizeResult.Score.ToString("F1")
                                        </span>
                                        <span class="score-total">/ 100</span>
                                    </div>
                                    <div class="exam-grade">
                                        <span class="letter-grade @(vizeResult.IsPassed ? "passed" : "failed")">
                                            @vizeResult.LetterGrade
                                        </span>
                                    </div>
                                    <div class="exam-date">
                                        @vizeResult.ExamDate.ToString("dd.MM.yyyy")
                                    </div>
                                }
                                else
                                {
                                    <div class="exam-not-available">
                                        <span class="score-dash">-</span>
                                        <div class="not-available-text">Henüz Girilmedi</div>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Ortalama Column (Orta) -->
                        <div class="exam-column average-column">
                            <div class="exam-column-header">
                                <span class="exam-type-badge average">Ortalama</span>
                            </div>
                            <div class="exam-column-content">
                                @if (average.HasValue)
                                {
                                    <div class="exam-score">
                                        <span class="score-number @(isPassed ? "passed" : "failed")">
                                            @average.Value.ToString("F1")
                                        </span>
                                        <span class="score-total">/ 100</span>
                                    </div>
                                    <div class="exam-status">
                                        <span class="status-text @(isPassed ? "passed" : "failed")">
                                            <i class="fas @(isPassed ? "fa-check-circle" : "fa-times-circle")"></i>
                                            @passStatus
                                        </span>
                                    </div>
                                }
                                else
                                {
                                    <div class="exam-not-available">
                                        <span class="score-dash">-</span>
                                        <div class="not-available-text">Hesaplanamıyor</div>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Final Column (Sağ) -->
                        <div class="exam-column">
                            <div class="exam-column-header">
                                <span class="exam-type-badge final">Final</span>
                            </div>
                            <div class="exam-column-content">
                                @if (finalResult != null)
                                {
                                    <div class="exam-score">
                                        <span class="score-number @(finalResult.IsPassed ? "passed" : "failed")">
                                            @finalResult.Score.ToString("F1")
                                        </span>
                                        <span class="score-total">/ 100</span>
                                    </div>
                                    <div class="exam-grade">
                                        <span class="letter-grade @(finalResult.IsPassed ? "passed" : "failed")">
                                            @finalResult.LetterGrade
                                        </span>
                                    </div>
                                    <div class="exam-date">
                                        @finalResult.ExamDate.ToString("dd.MM.yyyy")
                                    </div>
                                }
                                else
                                {
                                    <div class="exam-not-available">
                                        <span class="score-dash">-</span>
                                        <div class="not-available-text">Henüz Girilmedi</div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Bütünleme varsa göster -->
                    @if (butunlemeResult != null)
                    {
                        <div class="butunleme-section">
                            <div class="butunleme-header">
                                <span class="exam-type-badge butunleme">Bütünleme</span>
                                <span class="butunleme-date">@butunlemeResult.ExamDate.ToString("dd.MM.yyyy")</span>
                            </div>
                            <div class="butunleme-content">
                                <div class="exam-score">
                                    <span class="score-number @(butunlemeResult.IsPassed ? "passed" : "failed")">
                                        @butunlemeResult.Score.ToString("F1")
                                    </span>
                                    <span class="score-total">/ 100</span>
                                </div>
                                <div class="exam-grade">
                                    <span class="letter-grade @(butunlemeResult.IsPassed ? "passed" : "failed")">
                                        @butunlemeResult.LetterGrade
                                    </span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }

            <!-- Genel İstatistikler -->
            <div class="exam-results-stats">
                <div class="stat-card">
                    <div class="stat-number">@groupedResults.Count</div>
                    <div class="stat-label">Toplam Ders</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">@groupedResults.Count(g => g.Any(r => r.ExamType == "Vize" && r.IsPassed))</div>
                    <div class="stat-label">Vize Geçilen</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">@groupedResults.Count(g => g.Any(r => r.ExamType == "Final" && r.IsPassed))</div>
                    <div class="stat-label">Final Geçilen</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">@(Model.Count > 0 ? Model.Average(r => r.Score).ToString("F1") : "0")</div>
                    <div class="stat-label">Genel Ortalama</div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="announcement-list">
            <div class="announcement-card">
                <div class="announcement-content">
                    @if (ViewBag.UserDepartment != null)
                    {
                        <text>Henüz sınav sonucunuz bulunmuyor.</text>
                    }
                    else
                    {
                        <text>Lütfen önce giriş yapınız.</text>
                    }
                    <br><br>
                    Sonuçlar açıklandığında burada görüntülenecektir.
                </div>
            </div>
        </div>
    }
</div>

<style>
    /* Exam Results Row Layout */
    .exam-results-row {
        display: flex;
        gap: 20px;
        margin: 20px 0;
        background: rgba(40, 30, 60, 0.95);
        border: 1.5px solid #b87efb33;
        border-radius: 12px;
        padding: 25px;
        box-shadow: 0 4px 15px rgba(184, 126, 251, 0.15);
    }

    .exam-column {
        flex: 1;
        text-align: center;
        min-height: 120px;
    }

    .average-column {
        border-left: 2px solid #b87efb33;
        border-right: 2px solid #b87efb33;
        padding-left: 20px;
        padding-right: 20px;
    }

    .exam-column-header {
        margin-bottom: 15px;
    }

    .exam-type-badge {
        padding: 8px 16px;
        border-radius: 20px;
        font-weight: 700;
        font-size: 0.9rem;
        letter-spacing: 0.5px;
        display: inline-block;
    }

        .exam-type-badge.vize {
            background: linear-gradient(135deg, #ff6b6b, #ff8e8e);
            color: white;
        }

        .exam-type-badge.final {
            background: linear-gradient(135deg, #4ecdc4, #45b7af);
            color: white;
        }

        .exam-type-badge.average {
            background: linear-gradient(135deg, #b87efb, #9d67e8);
            color: white;
        }

        .exam-type-badge.butunleme {
            background: linear-gradient(135deg, #ffa726, #ff9800);
            color: white;
        }

    .exam-column-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    }

    .exam-score {
        display: flex;
        align-items: baseline;
        justify-content: center;
        gap: 5px;
    }

    .score-number {
        font-size: 2rem;
        font-weight: 800;
    }

        .score-number.passed {
            color: #4ecdc4;
        }

        .score-number.failed {
            color: #ff6b6b;
        }

    .score-total {
        color: #b87efb;
        font-size: 1rem;
        font-weight: 600;
    }

    .exam-grade {
        margin: 8px 0;
    }

    .letter-grade {
        font-size: 1.3rem;
        font-weight: 700;
        padding: 5px 12px;
        border-radius: 8px;
        border: 2px solid;
    }

        .letter-grade.passed {
            color: #4ecdc4;
            border-color: #4ecdc4;
            background: rgba(78, 205, 196, 0.1);
        }

        .letter-grade.failed {
            color: #ff6b6b;
            border-color: #ff6b6b;
            background: rgba(255, 107, 107, 0.1);
        }

    .exam-date {
        color: #e0d0ed;
        font-size: 0.9rem;
    }

    .exam-not-available {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 8px;
    }

    .score-dash {
        font-size: 3rem;
        font-weight: 800;
        color: #666;
    }

    .not-available-text {
        color: #999;
        font-style: italic;
        font-size: 0.9rem;
    }

    .exam-status {
        margin-top: 10px;
    }

    .status-text {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        font-weight: 700;
        font-size: 1.1rem;
    }

        .status-text.passed {
            color: #4ecdc4;
        }

        .status-text.failed {
            color: #ff6b6b;
        }

    /* Bütünleme Section */
    .butunleme-section {
        margin-top: 20px;
        padding: 20px;
        background: rgba(255, 167, 38, 0.1);
        border: 1.5px solid rgba(255, 167, 38, 0.3);
        border-radius: 10px;
    }

    .butunleme-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .butunleme-date {
        color: #e0d0ed;
        font-size: 0.9rem;
    }

    .butunleme-content {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 30px;
    }

    /* Stats */
    .exam-results-stats {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 30px;
        flex-wrap: wrap;
    }

        .exam-results-stats .stat-card {
            background: rgba(50, 40, 70, 0.93);
            border: 1.5px solid #b87efb33;
            border-radius: 14px;
            padding: 20px;
            text-align: center;
            min-width: 120px;
            box-shadow: 0 4px 15px rgba(184, 126, 251, 0.2);
        }

        .exam-results-stats .stat-number {
            font-size: 2.2rem;
            font-weight: 800;
            color: #b87efb;
            margin-bottom: 5px;
        }

        .exam-results-stats .stat-label {
            font-size: 0.9rem;
            color: #e0d0ed;
            font-weight: 500;
        }

    /* Responsive */
    {
        flex-direction: column;
        gap: 15px;
    }

    .average-column {
        border-left: none;
        border-right: none;
        border-top: 2px solid #b87efb33;
        border-bottom: 2px solid #b87efb33;
        padding-left: 0;
        padding-right: 0;
        padding-top: 20px;
        padding-bottom: 20px;
    }

    .butunleme-content {
        flex-direction: column;
        gap: 15px;
    }

    .exam-results-stats {
        gap: 15px;
    }

    }
</style>