@model List<EduSphere.Models.ExamResultViewModel>
@{
    ViewData["Title"] = "Sınav Sonuçlarım";
}

<div class="announcement-modal">
    <div class="announcement-title">Sınav Sonuçlarım</div>

    @if (ViewBag.UserDepartment != null)
    {
        <div class="schedule-info">
            <p class="department-info">
                <strong>Departman:</strong> @ViewBag.UserDepartment
            </p>
            @if (ViewBag.UserName != null)
            {
                <p class="student-info">
                    <strong>Öğrenci:</strong> @ViewBag.UserName
                </p>
            }
        </div>
    }

    @if (Model != null && Model.Count > 0)
    {
        <div class="announcement-list">
            @{
                var groupedResults = Model.GroupBy(r => r.CourseName)
                .OrderBy(g => g.Key)
                .ToList();
            }

            @foreach (var courseGroup in groupedResults)
            {
                <div class="announcement-card">
                    <div class="announcement-header">
                        <div class="announcement-title-inner">
                            @courseGroup.Key
                        </div>
                        <div class="announcement-date">
                            @courseGroup.Count() Sonuç
                        </div>
                    </div>

                    @foreach (var result in courseGroup.OrderBy(r => r.ExamDate))
                    {
                        <div class="exam-result-item">
                            <div class="exam-result-header">
                                <div class="exam-result-type exam-type-@result.ExamType.ToLower()">
                                    @result.ExamType
                                </div>
                                <div class="exam-result-date">
                                    @result.ExamDate.ToString("dd.MM.yyyy")
                                </div>
                            </div>
                            <div class="exam-result-details">
                                <div class="exam-result-score">
                                    <i class="fas fa-chart-line"></i>
                                    <span class="score-number @(result.IsPassed ? "passed" : "failed")">
                                        @result.Score.ToString("F1")
                                    </span>
                                    <span class="score-total">/ 100</span>
                                </div>
                                <div class="exam-result-grade">
                                    <i class="fas fa-graduation-cap"></i>
                                    <span class="letter-grade @(result.IsPassed ? "passed" : "failed")">
                                        @result.LetterGrade
                                    </span>
                                </div>
                                <div class="exam-result-status">
                                    <i class="fas @(result.IsPassed ? "fa-check-circle" : "fa-times-circle")"></i>
                                    <span class="status-text @(result.IsPassed ? "passed" : "failed")">
                                        @result.PassStatus
                                    </span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }

            <!-- Genel İstatistikler -->
            <div class="exam-results-stats">
                <div class="stat-card">
                    <div class="stat-number">@Model.Count</div>
                    <div class="stat-label">Toplam Sonuç</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">@Model.Count(r => r.IsPassed)</div>
                    <div class="stat-label">Geçilen</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">@Model.Count(r => !r.IsPassed)</div>
                    <div class="stat-label">Kalınan</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">@(Model.Count > 0 ? Model.Average(r => r.Score).ToString("F1") : "0")</div>
                    <div class="stat-label">Ortalama</div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="announcement-list">
            <div class="announcement-card">
                <div class="announcement-content">
                    @if (ViewBag.UserDepartment != null)
                    {
                        <text>Henüz sınav sonucunuz bulunmuyor.</text>
                    }
                    else
                    {
                        <text>Lütfen önce giriş yapınız.</text>
                    }
                    <br><br>
                    Sonuçlar açıklandığında burada görüntülenecektir.
                </div>
            </div>
        </div>
    }
</div>

<style>
    /* Mevcut CSS'e eklenecek */
    .exam-result-item {
        background: rgba(40, 30, 60, 0.95);
        border: 1.5px solid #b87efb33;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 15px;
        box-shadow: 0 4px 15px rgba(184, 126, 251, 0.15);
    }

    .exam-result-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .exam-result-type {
        padding: 8px 16px;
        border-radius: 20px;
        font-weight: 700;
        font-size: 0.9rem;
        letter-spacing: 0.5px;
    }

    .exam-result-date {
        color: #e0d0ed;
        font-size: 0.95rem;
    }

    .exam-result-details {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 15px;
    }

    .exam-result-score, .exam-result-grade, .exam-result-status {
        display: flex;
        align-items: center;
        gap: 8px;
        color: #e0d0ed;
    }

    .score-number, .letter-grade, .status-text {
        font-weight: 700;
        font-size: 1.1rem;
    }

        .score-number.passed, .letter-grade.passed, .status-text.passed {
            color: #4ecdc4;
        }

        .score-number.failed, .letter-grade.failed, .status-text.failed {
            color: #ff6b6b;
        }

    .score-total {
        color: #b87efb;
        font-size: 0.9rem;
    }

    .exam-results-stats {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 30px;
        flex-wrap: wrap;
    }

        .exam-results-stats .stat-card {
            background: rgba(50, 40, 70, 0.93);
            border: 1.5px solid #b87efb33;
            border-radius: 14px;
            padding: 20px;
            text-align: center;
            min-width: 120px;
            box-shadow: 0 4px 15px rgba(184, 126, 251, 0.2);
        }

        .exam-results-stats .stat-number {
            font-size: 2.2rem;
            font-weight: 800;
            color: #b87efb;
            margin-bottom: 5px;
        }

        .exam-results-stats .stat-label {
            font-size: 0.9rem;
            color: #e0d0ed;
            font-weight: 500;
        }

        flex-direction: column;
        align-items: flex-start;
    }

    .exam-results-stats {
        gap: 15px;
    }

    }
</style>